// @flow strict

declare type Key = string
declare type Place = string

declare export default class OrderedMap<+a> {
  size: number;
  static from(null | void | { [string]: a } | OrderedMap<a>): OrderedMap<a>;
  get(Key): ?a;
  update(Key, a, ?Key): OrderedMap<a>;
  remove(Key): OrderedMap<a>;
  addToStart(Key, a): OrderedMap<a>;
  addToEnd(Key, a): OrderedMap<a>;
  addBefore(Place, Key, a): OrderedMap<a>;
  forEach(f: (Key, a) => mixed): void;
  prepend({ [string]: a } | OrderedMap<a>): OrderedMap<a>;
  append({ [string]: a } | OrderedMap<a>): OrderedMap<a>;
  subtract({ [string]: a } | OrderedMap<a>): OrderedMap<a>;
}
